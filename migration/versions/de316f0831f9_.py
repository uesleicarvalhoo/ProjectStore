"""empty message

Revision ID: de316f0831f9
Revises: 60f151e462e9
Create Date: 2021-11-19 23:38:39.754126

"""
import sqlalchemy as sa
import sqlmodel
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "de316f0831f9"
down_revision = "60f151e462e9"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    sale_type = postgresql.ENUM(
        "SALE_IN_PIX",
        "SALE_IN_DEBT",
        "SALE_IN_CREDIT",
        "SALE_IN_MONEY",
        "SALE_IN_TRANSFER",
        "SALE_IN_BILLET",
        "SALE_OTHERS",
        name="saletype",
    )
    sale_type.create(op.get_bind())
    op.add_column(
        "orders",
        sa.Column(
            "sale_type",
            sa.Enum(
                "SALE_IN_PIX",
                "SALE_IN_DEBT",
                "SALE_IN_CREDIT",
                "SALE_IN_MONEY",
                "SALE_IN_TRANSFER",
                "SALE_IN_BILLET",
                "SALE_OTHERS",
                name="saletype",
            ),
            nullable=True,
        ),
    )

    op.drop_index("ix_balance_operation", table_name="balance")
    op.drop_index("ix_balance_type", table_name="balance")
    op.drop_column("balance", "type")
    op.alter_column("clients", "email", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column("clients", "phone", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column("clients", "owner_id", existing_type=postgresql.UUID(), nullable=False)

    op.alter_column("orders", "owner_id", existing_type=postgresql.UUID(), nullable=False)
    op.add_column("clients", sa.Column("zip_code", sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column("clients", sa.Column("address", sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column("order_details", sa.Column("value", sa.Float(), nullable=True))
    op.drop_column("order_details", "sell_value")
    op.drop_column("order_details", "cost")

    op.drop_index("ix_fiscal_note_items_buy_value", table_name="fiscal_note_items")
    op.drop_index("ix_fiscal_note_items_file_id", table_name="fiscal_note_items")
    op.drop_index("ix_fiscal_note_items_fiscal_note_id", table_name="fiscal_note_items")
    op.drop_index("ix_fiscal_note_items_item_id", table_name="fiscal_note_items")
    op.drop_index("ix_fiscal_note_items_owner_id", table_name="fiscal_note_items")
    op.drop_index("ix_fiscal_note_items_sugested_sell_value", table_name="fiscal_note_items")
    op.drop_table("fiscal_note_items")
    op.drop_index("ix_fiscal_notes_description", table_name="fiscal_notes")
    op.drop_index("ix_fiscal_notes_file_id", table_name="fiscal_notes")
    op.drop_index("ix_fiscal_notes_owner_id", table_name="fiscal_notes")
    op.drop_index("ix_fiscal_notes_purchase_date", table_name="fiscal_notes")
    op.drop_table("fiscal_notes")
    op.drop_index("ix_users_email", table_name="users")
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column("orders", "owner_id", existing_type=postgresql.UUID(), nullable=True)
    op.drop_column("orders", "sale_type")
    op.alter_column("clients", "owner_id", existing_type=postgresql.UUID(), nullable=True)
    op.alter_column("clients", "phone", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column("clients", "email", existing_type=sa.VARCHAR(), nullable=True)
    op.add_column(
        "balance",
        sa.Column("type", postgresql.ENUM("DEBT", "CREDIT", name="balancetype"), autoincrement=False, nullable=True),
    )
    op.create_index("ix_balance_type", "balance", ["type"], unique=False)
    op.create_index("ix_balance_operation", "balance", ["operation"], unique=False)
    op.drop_column("clients", "address")
    op.drop_column("clients", "zip_code")
    op.add_column(
        "order_details",
        sa.Column("cost", postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    )
    op.add_column(
        "order_details",
        sa.Column("sell_value", postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    )
    op.drop_column("order_details", "value")

    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.create_index("ix_users_email", "users", ["email"], unique=False)
    op.create_table(
        "fiscal_notes",
        sa.Column("id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("purchase_date", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column("owner_id", postgresql.UUID(), autoincrement=False, nullable=True),
        sa.Column("file_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(["file_id"], ["files.bucket_key"], name="fiscal_notes_file_id_fkey"),
        sa.ForeignKeyConstraint(["owner_id"], ["users.id"], name="fiscal_notes_owner_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="fiscal_notes_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_fiscal_notes_purchase_date", "fiscal_notes", ["purchase_date"], unique=False)
    op.create_index("ix_fiscal_notes_owner_id", "fiscal_notes", ["owner_id"], unique=False)
    op.create_index("ix_fiscal_notes_file_id", "fiscal_notes", ["file_id"], unique=False)
    op.create_index("ix_fiscal_notes_description", "fiscal_notes", ["description"], unique=False)
    op.create_table(
        "fiscal_note_items",
        sa.Column("id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("buy_value", postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
        sa.Column(
            "sugested_sell_value", postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False
        ),
        sa.Column("owner_id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("fiscal_note_id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("item_id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("file_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(["file_id"], ["files.bucket_key"], name="fiscal_note_items_file_id_fkey"),
        sa.ForeignKeyConstraint(["fiscal_note_id"], ["fiscal_notes.id"], name="fiscal_note_items_fiscal_note_id_fkey"),
        sa.ForeignKeyConstraint(["item_id"], ["items.id"], name="fiscal_note_items_item_id_fkey"),
        sa.ForeignKeyConstraint(["owner_id"], ["users.id"], name="fiscal_note_items_owner_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="fiscal_note_items_pkey"),
    )
    op.create_index(
        "ix_fiscal_note_items_sugested_sell_value", "fiscal_note_items", ["sugested_sell_value"], unique=False
    )
    op.create_index("ix_fiscal_note_items_owner_id", "fiscal_note_items", ["owner_id"], unique=False)
    op.create_index("ix_fiscal_note_items_item_id", "fiscal_note_items", ["item_id"], unique=False)
    op.create_index("ix_fiscal_note_items_fiscal_note_id", "fiscal_note_items", ["fiscal_note_id"], unique=False)
    op.create_index("ix_fiscal_note_items_file_id", "fiscal_note_items", ["file_id"], unique=False)
    op.create_index("ix_fiscal_note_items_buy_value", "fiscal_note_items", ["buy_value"], unique=False)
    # ### end Alembic commands ###
